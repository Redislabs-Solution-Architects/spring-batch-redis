plugins {
    id 'distribution'
    id 'java-library'
    id 'java-library-distribution'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.ben-manes.versions' version '0.35.0'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
}

group = 'com.redislabs'
description = 'Spring Batch Redis'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

java {
    withSourcesJar()
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    api 'io.lettuce:lettuce-core:6.0.1.RELEASE'
    api 'org.apache.commons:commons-pool2:2.9.0'
    implementation ('org.springframework.boot:spring-boot-starter-batch:2.3.5.RELEASE') {
        exclude group: 'io.lettuce', module: 'lettuce-core'
    }
    implementation 'com.hybhub:concurrent-util:0.3.0'
    api 'io.micrometer:micrometer-core:1.6.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.3.5.RELEASE') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.batch:spring-batch-test:4.3.0'
    testImplementation 'org.hsqldb:hsqldb:2.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.testcontainers:testcontainers:1.15.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.15.0'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.11.3'
    testImplementation 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
}

test {
    useJUnitPlatform()
}

distributions {
    main {
        contents {
            from (project.docsDir) {
                into 'docs'
            }
            from 'README.adoc'
            from 'LICENSE'
        }
    }
}

distTar {
    compression = Compression.GZIP
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Spring Batch Redis'
                description = 'Spring Batch reader and writer implementations for Redis'
                url = 'https://github.com/Redislabs-Solution-Architects/spring-batch-redis'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jruaux'
                        name = 'Julien Ruaux'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Redislabs-Solution-Architects/spring-batch-redis'
                    developerConnection = 'scm:git:git@github.com:Redislabs-Solution-Architects/spring-batch-redis'
                    url = 'https://github.com/Redislabs-Solution-Architects/spring-batch-redis'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Redislabs-Solution-Architects/spring-batch-redis.git'
        version {
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
                user = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
                password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
            }
        }
    }
}

githubRelease {
    token = project.hasProperty('githubToken') ? project.property('githubToken') : ''
    owner "Redislabs-Solution-Architects"
    repo "spring-batch-redis"
    releaseAssets distZip, distTar
    body changelog()
}

def isNonStable = { String version ->
  def nonStableKeyword = ['PREVIEW'].any { it -> version.toUpperCase().contains(it) }
  def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE8'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+([.-]r)?$/
  return nonStableKeyword || (!stableKeyword && !(version ==~ regex))
}

tasks.named("dependencyUpdates").configure {

  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }

}

afterReleaseBuild.dependsOn ":githubRelease"
afterReleaseBuild.dependsOn bintrayUpload